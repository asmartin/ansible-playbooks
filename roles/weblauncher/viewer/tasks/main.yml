---
 - name: add google chrome repository key
   apt_key: url=https://dl-ssl.google.com/linux/linux_signing_key.pub

 - name: add google chrome repository
   apt_repository: repo="deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" state=present

 - name: add repository for HAL
   apt_repository: repo="ppa:mjblenner/ppa-hal" state=present
   when: use_hal

 - name: install viewer packages
   apt: name={{ item }} state=latest update_cache=yes cache_valid_time="{{ apt_cache_time }}"
   with_items:
    - firefox
    - "{{ (ansible_distribution_release == 'xenial') | ternary('python-software-properties', 'software-properties-common') }}"
    - ubuntu-restricted-extras
    - xinetd
    - libnotify-bin
    - zenity
    - udev
    - libnss3
    - chameleon-cursor-theme
    - google-chrome-stable
    - git
    - x11vnc
    - preload

   # a separate task since we want state=present, not state=latest
 - name: install hal
   apt: name=hal state=present
   when: use_hal

 - name: install pulseaudio
   apt: name=pavucontrol state=latest
   when: use_pulseaudio

 - name: remove pulseaudio
   apt: name={{ item }} state=absent
   when: not use_pulseaudio
   with_items:
    - pulseaudio
    - rtkit
    - pavucontrol

 - name: remove unwanted packages
   apt: name={{ item }} state=absent
   with_items:
    - apport
    - whoopsie
    - update-manager

 - name: install HAL upstart job
   template: src=hal.upstart.conf dest=/etc/init/hal.conf
   when: ansible_distribution_release == "trusty" and use_hal
   notify: restart HAL

 - name: install HAL systemd unit
   template: src=hal.systemd.service dest=/etc/systemd/system/hal.service
   when: ansible_distribution_release != "trusty" and use_hal
   notify: restart HAL systemd

 - name: download SimpleComputerRemote
   get_url: url="{{ simplecomputeremote_url }}" dest="/tmp/SimpleComputerRemote.deb"
   changed_when: False

 - name: install SimpleComputerRemote
   apt: deb="/tmp/SimpleComputerRemote.deb" state=present
   tags:
    - not_in_dry_run

 - name: install xinetd service
   template: src={{ item.src }} dest={{ item.dest }}
   with_items:
    - { src: services, dest: /etc/services }
    - { src: weblauncher.xinetd, dest: /etc/xinetd.d/weblauncher }
   notify: restart xinetd

 - name: install websockify
   git: repo=https://github.com/kanaka/websockify.git dest=/usr/share/websockify

 - name: create websockify upstart job
   template: src=websockify.upstart.j2 dest=/etc/init/websockify.conf
   when: ansible_distribution_release == "trusty"
   notify: restart websockify

 - name: create websockify systemd unit
   template: src=websockify.systemd.service dest=/etc/systemd/system/websockify.service
   when: ansible_distribution_release != "trusty"
   notify: restart websockify systemd

 - name: create x11vnc upstart job
   template: src=x11vnc.upstart.j2 dest=/etc/init/x11vnc.conf
   when: ansible_distribution_release == "trusty"
   notify: restart x11vnc

 - name: create x11vnc systemd unit
   template: src=x11vnc.systemd.service dest=/etc/systemd/system/x11vnc.service
   when: ansible_distribution_release != "trusty"
   notify: restart x11vnc systemd

 - name: create autostart directory
   file: path="/home/{{ viewer_user }}/.config/autostart" state=directory owner="{{ viewer_user }}" group="{{ viewer_user }}"

 - name: disable light-locker
   file: path="{{ item }}" state=absent
   with_items:
    - "/home/{{ viewer_user }}/.config/autostart/light-locker.desktop"
    - /etc/xdg/autostart/light-locker.desktop
 
 - name: disable X11 screen blanking
   template: src=disable-x11-blanking.sh dest=/usr/local/bin/disable-x11-blanking.sh mode=0755

 - name: create directories
   file: path="{{ item }}" state=directory
   with_items:
    - "/home/{{ viewer_user }}/.config/xfce4/xfconf/xfce-perchannel-xml"

 - name: copy files
   template: src={{ item.src }} dest={{ item.dest }} owner={{ item.owner }} group={{ item.owner }}
   with_items:
    - { src: weblauncher.sudoers, dest: /etc/sudoers.d/weblauncher, owner: root }
    - { src: desktop.conf, dest: "/home/{{ viewer_user }}/.config/lxsession/Lubuntu/desktop.conf", owner: "{{ viewer_user }}" }
    - { src: simple-computer-remote.desktop, dest: "/home/{{ viewer_user }}/.config/autostart/simple-computer-remote.desktop", owner: "{{ viewer_user }}" }
    - { src: x11-settings.desktop, dest: "/home/{{ viewer_user }}/.config/autostart/x11-settings.desktop", owner: "{{ viewer_user }}" }
    - { src: xfce4-power-manager.xml, dest: "/home/{{ viewer_user }}/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-power-manager.xml", owner: "{{ viewer_user }}" }
    - { src: xfce4-session.xml, dest: "/home/{{ viewer_user }}/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-session.xml", owner: "{{ viewer_user }}" }

 - name: copy scripts
   template: src={{ item }} dest="/usr/local/bin/{{ item }}" mode=755
   with_items:
    - weblauncher.sh
    - sleeper.sh
    - enable-wakeup.sh
    - select-resume-devices.sh
    - set_hdmi_sound.sh

 - name: schedule sleeper cron
   cron: name="sleeper.sh" job=/usr/local/bin/sleeper.sh

 - name: create share folder
   file: path={{ weblauncher_share_dir }} state=directory

 - name: copy wallpaper
   copy: src=weblauncher-wallpaper.png dest={{ weblauncher_share_dir }}/wallpaper.png

 - name: set wallpaper
   become: yes
   become_user: "{{ viewer_user }}"
   shell: export DISPLAY=:0 ; pcmanfm --set-wallpaper={{ weblauncher_share_dir }}/wallpaper.png

 - name: fix pulseaudio resume from sleep
   template: src=resume-fix-pulseaudio.service dest=/etc/systemd/system/resume-fix-pulseaudio.service
   notify: enable pulseaudio fix
   when: fix_pulseaudio_suspend and ansible_distribution_release != "trusty" 

 - block:
    - name: copy udev rule for hdmi sound
      template:
        src: 99-hdmi-sound.rules
        dest: /etc/udev/rules.d/99-hdmi-sound.rules
      notify: reload udev
   
    - name: copy systemd unit for hdmi sound
      template:
        src: set_hdmi_sound.service
        dest: /etc/systemd/system/set_hdmi_sound.service
      notify: restart set_hdmi_sound
   when: set_hdmi_sound
